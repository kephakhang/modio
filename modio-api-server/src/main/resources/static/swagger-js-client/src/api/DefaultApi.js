/**
 * SolidModel
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mgkaki@yally.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Response', 'model/Error', 'model/Member', 'model/Content', 'model/Login'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Response'), require('../model/Error'), require('../model/Member'), require('../model/Content'), require('../model/Login'));
  } else {
    // Browser globals (root is window)
    if (!root.SolidModel) {
      root.SolidModel = {};
    }
    root.SolidModel.DefaultApi = factory(root.SolidModel.ApiClient, root.SolidModel.Response, root.SolidModel.Error, root.SolidModel.Member, root.SolidModel.Content, root.SolidModel.Login);
  }
}(this, function(ApiClient, Response, Error, Member, Content, Login) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addUser operation.
     * @callback module:api/DefaultApi~addUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post &#x60;Member&#x60; object. - 사용자 정보 추가 - **member** 은 사용자 정보 입력 파라미터 JSON 이며, 리턴 값은 성공/실패 여부 판단 값이다. 
     * @param {module:model/Member} member 멤버 정보 JSON
     * @param {module:api/DefaultApi~addUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.addUser = function(member, callback) {
      var postBody = member;

      // verify the required parameter 'member' is set
      if (member == undefined || member == null) {
        throw "Missing the required parameter 'member' when calling addUser";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserContent operation.
     * @callback module:api/DefaultApi~addUserContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post &#x60;Content&#x60; object. - 사용자 컨텐츠 정보 추가 -  **id** 는 사용자 아이디(email) 이며, **content** 는 컨텐츠 정보 입니다. 
     * @param {String} id 사용자 아이디(email)
     * @param {module:model/Content} content 사용자 컨텐츠 정보 JSON
     * @param {module:api/DefaultApi~addUserContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.addUserContent = function(id, content, callback) {
      var postBody = content;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling addUserContent";
      }

      // verify the required parameter 'content' is set
      if (content == undefined || content == null) {
        throw "Missing the required parameter 'content' when calling addUserContent";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users/{id}/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete &#x60;Member&#x60; - 사용자 정보 삭제 - **id** 는 사용자 아이디(email) 입니다. 
     * @param {String} id 멤버 정보
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.deleteUser = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteUser";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserContent operation.
     * @callback module:api/DefaultApi~deleteUserContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete &#x60;Content&#x60; - 사용자 컨텐츠 정보 삭제 - **id** 는 사용자 아이디(email) 이며, **id** 는 컨텐츠 아이디 입니다. 
     * @param {String} id 사용자 아이디(email)
     * @param {Integer} id2 사용자 컨텐츠 아이디
     * @param {module:api/DefaultApi~deleteUserContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.deleteUserContent = function(id, id2, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteUserContent";
      }

      // verify the required parameter 'id2' is set
      if (id2 == undefined || id2 == null) {
        throw "Missing the required parameter 'id2' when calling deleteUserContent";
      }


      var pathParams = {
        'id': id,
        'id': id2
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users/{id}/content/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserById operation.
     * @callback module:api/DefaultApi~findUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get &#x60;Member&#x60; object. - 사용자 정보 수신 - **id** 는 사용자 아이디(email) 입니다. 리턴 값은 멤버(Member) object 입니다. 
     * @param {String} id 사용자 아이디(email)
     * @param {module:api/DefaultApi~findUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    this.findUserById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling findUserById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Member;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserContentById operation.
     * @callback module:api/DefaultApi~findUserContentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Content} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get &#x60;Content&#x60; object. - 사용자 컨텐츠 정보 수신 - **id** 는 사용자 아이디(email) 이며, **id** 는 컨텐츠 아이디 입니다. 리턴 값은 멤버(Content) object 입니다. 
     * @param {String} id 사용자 아이디(email)
     * @param {Integer} id2 사용자 컨텐츠 아이디
     * @param {module:api/DefaultApi~findUserContentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Content}
     */
    this.findUserContentById = function(id, id2, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling findUserContentById";
      }

      // verify the required parameter 'id2' is set
      if (id2 == undefined || id2 == null) {
        throw "Missing the required parameter 'id2' when calling findUserContentById";
      }


      var pathParams = {
        'id': id,
        'id': id2
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Content;

      return this.apiClient.callApi(
        '/users/{id}/content/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check &#x60;Login&#x60; **login** 은 로그인 정보 값이다. 리턴 값은 성공/실패 여부 판단 값이다. 
     * @param {module:model/Login} login 멤버 정보
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.login = function(login, callback) {
      var postBody = login;

      // verify the required parameter 'login' is set
      if (login == undefined || login == null) {
        throw "Missing the required parameter 'login' when calling login";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put &#x60;Member&#x60; object. - 사용자 정보 수정 -  **member** 는 사용자 정보 입력 파라미터 JSON 입니다. 리턴 값은 성공/실패 여부 판단 값입니다. 
     * @param {module:model/Member} member 멤버 정보 JSON
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.updateUser = function(member, callback) {
      var postBody = member;

      // verify the required parameter 'member' is set
      if (member == undefined || member == null) {
        throw "Missing the required parameter 'member' when calling updateUser";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserContent operation.
     * @callback module:api/DefaultApi~updateUserContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put &#x60;Content&#x60; object. - 사용자 컨텐츠 정보 수정 -  **id** 는 사용자 아이디(email) 이며, **content** 는 컨텐츠 정보 입니다. 
     * @param {String} id 사용자 아이디(email)
     * @param {module:model/Content} content 사용자 컨텐츠 정보 JSON
     * @param {module:api/DefaultApi~updateUserContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.updateUserContent = function(id, content, callback) {
      var postBody = content;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateUserContent";
      }

      // verify the required parameter 'content' is set
      if (content == undefined || content == null) {
        throw "Missing the required parameter 'content' when calling updateUserContent";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users/{id}/content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadUserContent operation.
     * @callback module:api/DefaultApi~uploadUserContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upload &#x60;3D Content&#x60; file. - 사용자 컨텐츠 정보 추가 -  **id** 는 사용자 아이디(email) 이며, **file** 은 컨텐츠 파일 입니다. **content** 는 컨텐츠 정보 입니다. 
     * @param {String} id 사용자 아이디(email)
     * @param {File} file 업로드 파일
     * @param {Integer} caId 컨텐츠 카테고리 아이디
     * @param {String} title 컨텐츠 제목
     * @param {String} rmk 컨텐츠 내용
     * @param {module:api/DefaultApi~uploadUserContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.uploadUserContent = function(id, file, caId, title, rmk, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling uploadUserContent";
      }

      // verify the required parameter 'file' is set
      if (file == undefined || file == null) {
        throw "Missing the required parameter 'file' when calling uploadUserContent";
      }

      // verify the required parameter 'caId' is set
      if (caId == undefined || caId == null) {
        throw "Missing the required parameter 'caId' when calling uploadUserContent";
      }

      // verify the required parameter 'title' is set
      if (title == undefined || title == null) {
        throw "Missing the required parameter 'title' when calling uploadUserContent";
      }

      // verify the required parameter 'rmk' is set
      if (rmk == undefined || rmk == null) {
        throw "Missing the required parameter 'rmk' when calling uploadUserContent";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file,
        'ca_id': caId,
        'title': title,
        'rmk': rmk
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/html'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/users/{id}/content/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
